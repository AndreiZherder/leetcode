"""
Given four integer arrays nums1, nums2, nums3, and nums4 all of length n,
return the number of tuples (i, j, k, l) such that:

0 <= i, j, k, l < n
nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0


Example 1:

Input: nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]
Output: 2
Explanation:
The two tuples are:
1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0
Example 2:

Input: nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]
Output: 1


Constraints:

n == nums1.length
n == nums2.length
n == nums3.length
n == nums4.length
1 <= n <= 200
-2^28 <= nums1[i], nums2[i], nums3[i], nums4[i] <= 2^28
"""
from typing import List
from collections import Counter


class Solution:
    def fourSumCount(self, nums1: List[int], nums2: List[int], nums3: List[int], nums4: List[int]) -> int:
        ans = 0
        sums34 = Counter(num3 + num4 for num3 in nums3 for num4 in nums4)
        for sum12 in (num1 + num2 for num1 in nums1 for num2 in nums2):
            ans += sums34.get(-sum12, 0)
        return ans


def main():
    nums1 = [-35, -18, -94, 80, 92, 68, 29, -45, 27, 58, 22, 53, 80, -2, -98, 25, 94, 14, 61, 76, 63, 34, 25, -25, 21, -22, -37,
     -13, 1, -74, -11, -77, -50, -10, -68, 32, 3, 34, -67, 41, 70, -54, 36, 83, -9, 83, 32, 84, -94, 47, -9, 63, -52,
     58, -62, -74, 21, 98, -60, -1, -69, -2, 31, 92, -71, 93, 65, 41, 39, 52, 59, -78, 40, 97, -50, -41, -21, -84, 94,
     87, -5, 2, 61, -54, -94, -66, 81, -54, 35, 82, -62, 82, -52, 1, -31, -68, -76, 61, 91, -71, 93, -21, -25, -90, -38,
     -49, -30, -63, -15, -22, -8, -54, 96, 93, 77, 77, -11, -17, -97, -33, 78, 28, 93, 56, -37, 72, -76, -86, -41, 40,
     69, -72, 84, 66, 47, 21, -88, -65, -8, 47, 52, 68, -95, 83, -44, -8, -56]
    nums2 = [-58, -35, 95, 73, -4, 86, 33, -33, -47, -79, 37, 14, 22, 26, 40, -11, 97, -41, -49, 9, -94, 8, -84, 4, -44, -71,
     -35, 48, 93, -66, -33, 100, -83, 80, -95, 55, 67, 43, 72, -71, 38, 74, -97, -13, 71, 12, -82, 33, 34, -35, -4,
     -100, -66, -68, -30, 44, 9, -4, -53, 39, -13, -90, -23, 41, 82, -54, 43, 13, 85, -62, 44, -70, -26, -82, -54, 28,
     40, -88, 86, 37, 47, 94, -52, -6, 88, -41, 41, 95, 47, 18, 76, -7, -65, -77, 19, -1, -50, -72, -57, -7, -97, -48,
     -47, 72, -52, -7, 85, 71, 56, -80, 80, 80, -22, -82, -70, 91, 22, -5, -45, -68, 49, -65, -88, 100, -39, -10, -87,
     59, -39, -94, -81, -60, 52, 17, -49, 26, 95, 57, 52, 16, 82, -17, 56, 35, -15, -47, 26]
    nums3 = [42, -25, -48, -84, 54, 20, -26, 84, -77, -79, 94, -95, -5, 0, -45, -5, 62, 31, -77, -91, 52, 100, 17, -14, 33, 86,
     41, 27, 46, 34, -97, 76, 94, 69, -55, 70, 36, -47, -67, -65, -81, 70, 9, -17, -60, 99, 7, 3, 91, 49, -35, -55, -1,
     0, 10, -46, -90, -60, 72, -64, 95, -92, -67, -87, 51, 36, 35, -1, 83, 45, -30, -78, -15, 70, 95, -71, -94, 15, 3,
     -46, -57, 6, 52, 40, -44, 90, 73, -22, -77, -22, 23, 49, 61, -50, -61, -6, -51, -54, -33, -52, 10, -73, 86, 22, 87,
     -61, -38, 11, 36, 79, -22, -38, 84, -2, -74, -65, -22, -59, -16, -95, 18, -38, -66, 1, 3, -81, -63, 31, 8, -29,
     -83, 37, -91, 31, -69, 71, 76, -2, -25, 62, -87, -93, -95, -64, 4, -58, -93]
    nums4 = [44, 71, 58, 56, -35, 83, -35, 43, 36, -26, 54, -2, -66, 72, 96, -92, -22, 8, -80, 52, 92, -51, 78, -39, -30, -94,
     80, -66, -18, -64, 32, 48, -52, -52, -65, 54, -74, -11, 33, 69, 54, -59, -54, -49, 59, -42, 69, -64, 23, 44, -33,
     5, 100, -70, 38, 57, 13, -39, -36, 66, 100, 25, 1, -65, -26, 75, 98, -76, -66, -20, 72, 1, 82, 24, 96, -21, 100,
     -23, -61, 93, 51, 68, 98, -21, 38, 74, 25, -1, -64, -13, -89, 30, -22, -87, -44, -89, 1, 59, -12, 29, -16, 57, 54,
     40, 51, -7, 61, 41, -6, 83, 62, -56, 84, 33, -28, -95, -93, 85, 20, -66, 94, 13, 98, 48, 58, -74, 24, -59, 1, 46,
     9, -71, 51, -16, 13, 36, 96, -16, -66, -39, -59, 100, 3, 41, -97, 8, 22]
    print(Solution().fourSumCount(nums1, nums2, nums3, nums4))


if __name__ == '__main__':
    main()
