"""
You are given an array of binary strings strs and two integers m and n.

Return the size of the largest subset of strs such that there are at most m 0's and n 1's in the subset.

A set x is a subset of a set y if all elements of x are also elements of y.



Example 1:

Input: strs = ["10","0001","111001","1","0"], m = 5, n = 3
Output: 4
Explanation: The largest subset with at most 5 0's and 3 1's is {"10", "0001", "1", "0"}, so the answer is 4.
Other valid but smaller subsets include {"0001", "1"} and {"10", "1", "0"}.
{"111001"} is an invalid subset because it contains 4 1's, greater than the maximum of 3.
Example 2:

Input: strs = ["10","0","1"], m = 1, n = 1
Output: 2
Explanation: The largest subset is {"0", "1"}, so the answer is 2.


Constraints:

1 <= strs.length <= 600
1 <= strs[i].length <= 100
strs[i] consists only of digits '0' and '1'.
1 <= m, n <= 100
"""
from typing import List


class Solution:
    def findMaxForm(self, strs: List[str], m: int, n: int) -> int:
        items = [(0, 0)]
        for str in strs:
            zeroes = str.count('0')
            ones = len(str) - zeroes
            items.append((zeroes, ones))
        N = len(items)
        dp = [[[0 for k in range(N)] for j in range(n + 1)] for i in range(m + 1)]
        for k in range(1, N):
            for i in range(m + 1):
                for j in range(n + 1):
                    if i - items[k][0] >= 0 and j - items[k][1] >= 0:
                        dp[i][j][k] = max(dp[i][j][k - 1], dp[i - items[k][0]][j - items[k][1]][k - 1] + 1)
                    else:
                        dp[i][j][k] = dp[i][j][k - 1]
        return dp[m][n][N - 1]


def main():
    # strs = ["10", "0001", "111001", "1", "0"]
    # m = 5
    # n = 3
    # strs = ["10", "0", "1"]
    # m = 1
    # n = 1
    # strs = ["111", "1000", "1000", "1000"]
    # m = 9
    # n = 3
    # strs = ["10", "0001", "111001", "1", "0"]
    # m = 4
    # n = 3
    strs = ["00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00",
     "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01",
     "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00",
     "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01",
     "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00",
     "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01",
     "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00",
     "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01",
     "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00",
     "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01",
     "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00",
     "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01",
     "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00",
     "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01",
     "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00",
     "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01",
     "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00",
     "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01",
     "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00",
     "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01",
     "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00",
     "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01",
     "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00",
     "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01",
     "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00",
     "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01",
     "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00",
     "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01", "00", "01"]
    m = 50
    n = 50
    print(Solution().findMaxForm(strs, m, n))


if __name__ == '__main__':
    main()
